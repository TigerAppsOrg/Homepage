---
import Layout from "../layouts/Layout.astro";
import Footer from "../components/page/Footer.astro";
import HeaderShell from "../components/HeaderShell.astro";
import WhiteLogo from "../assets/icons/logo_white.png";
import Image from "astro/components/Image.astro";
---

<head>
    <title>TigerApps - Resources</title>
</head>

<Layout>
    <HeaderShell>
        <a href="/" class="flex items-center gap-2">
            <Image
                src={WhiteLogo}
                alt="TigerApps Logo"
                class="h-8 w-8 object-contain"
            />
            <h1 class="text-2xl font-semibold">
                <span class="text-tigerapps-orange">Tiger</span><span
                    class="text-white">Apps</span
                >
            </h1>
        </a>
        <nav class="hidden sm:flex items-center text-lg gap-12">
            <a href="/"> Home</a>
            <a href="/archive"> Archive </a>
            <a href="/resources"> Resources</a>
        </nav>
    </HeaderShell>

    <main id="resources-page" class="space-y-4 w-11/12 max-w-5xl mx-auto my-8">
        <h2 class="pt-16">TigerApps Resources Page</h2>
        <p>
            This page is a collection of resources for Princeton students
            looking to build apps for the Princeton community. If you have any
            questions or need assistance, please reach out to the TigerApps team
            at
            <strong>it.admin@tigerapps.org</strong>.
        </p>
        <h2 id="possible-pre-requisites">Possible Pre-Requisites</h2>
        <h4 id="whitelist-for-cas-authentication-use">
            Whitelist for CAS Authentication Use
        </h4>
        <p>
            If you intend to deploy your app and require CAS authentication on
            your app, you must make a request to OIT to whitelist your app's
            host. Each time a user navigates to your app, your browser sends a
            request to fed.princeton.edu; your app's host must be on the CAS
            whitelist for CAS authentication to proceed. Note that <code
                >localhost</code
            > is already on the CAS whitelist.
        </p>
        <p>
            To whitelist your app, fill out
            <a
                target="_blank"
                href="https://princeton.service-now.com/com.glideapp.servicecatalog_cat_item_view.do?v=1&sysparm_id=edd831664f2c3340f56c0ad14210c7df&sysparm_link_parent=ee785ce84f5f120022a859dd0210c778&sysparm_catalog=e0d08b13c3330100c8b837659bba8fb4&sysparm_catalog_view=catalog_default&sysparm_view=catalog_default"
                >this form</a
            >.
        </p>
        <ul>
            <li>Under Requested By, enter your name.</li>
            <li>
                Under Service Name, enter your app's host (e.g.
                https://myapp.herokuapp.com).
            </li>
            <li>
                Under More Information, type a sentence or two about your app's
                name and purpose.
            </li>
            <li>
                Answer the Slack Workspace question. Enter/select
                &quot;unknown&quot; for all remaining fields.
            </li>
        </ul>
        <p>
            To implement CAS, view the documentation found <a
                href="https://princeton.service-now.com/service?id=kb_article&sys_id=KB0012958"
                target="_blank">here</a
            > and/or use the following examples:
        </p>
        <ul>
            <li>
                <strong> Python CAS implementation: </strong>
                <a
                    target="_blank"
                    href="https://git.io/JRNLp"
                    aria-label="Python CAS implementation">link</a
                >
                <ul>
                    <li>
                        You must cite authors
                        <em
                            >Alex Halderman, Scott Karlin, Brian Kernighan, Bob
                            Dondero</em
                        >
                        in the header of your file.
                    </li>
                    <li>
                        Triggering login and getting netID in Python:
                        <a
                            target="_blank"
                            href="https://git.io/JRNtn"
                            aria-label="Python login and netID retrieval"
                            >link</a
                        >
                    </li>
                </ul>
            </li>
            <li>
                <strong> SvelteKit CAS implementation: </strong>
                <a
                    target="_blank"
                    href="https://github.com/TigerAppsOrg/tiger-study-2/blob/main/src/lib/server/cas.ts"
                    aria-label="SvelteKit CAS implementation">link</a
                >
                <ul>
                    <li>
                        This implementation is specific to the TigerStudy app,
                        so you'd need to make a few modifications.
                    </li>
                    <li>
                        It also uses the v3 CAS protocol to get user info beyond
                        just the netID.
                    </li>
                    <li>
                        Contact Joshua Lau '26 (joshuamotoaki@gmail.com) for
                        assistance.
                    </li>
                </ul>
            </li>
        </ul>
        <h4 id="requesting-a-service-account">Requesting A Service Account</h4>
        <p>
            Creating a service account netID allows your team to use the same
            netID to access OIT's API Store and other CAS-authenticated apps,
            even after you graduate. The netID is meant to be used only with
            your app, and not any Princeton student/faculty.
        </p>
        <p>
            To request a service account,
            <a
                target="_blank"
                href="https://www.google.com/url?q=https://princeton.service-now.com/service?sys_id%3Df44539ab4ff81640f56c0ad14210c77c%26id%3Dsc_cat_item%26table%3Dsc_cat_item&sa=D&source=editors&ust=1630343345951000&usg=AOvVaw0kEm_5PUXad0MXIaU7daRJ"
                >file a ticket</a
            >
            through OIT.
        </p>
        <ul>
            <li>
                For Sponsor, enter the name of a Princeton faculty member. Note
                that creating and persisting a service account requires
                contacting a faculty sponsor (e.g. Prof. Robert Dondero) and
                asking them to sponsor your service account.
            </li>
            <li>
                For Duration of Account, select Permanent if you intend for the
                app to exist in the long term.
            </li>
            <li>For Business Reason, write your account's purpose.</li>
            <li>
                For Type of Account, select "General Use". A new input called
                Additional Information will appear: here, you can request to
                have an Exchange mailbox for your service netID. Having an email
                address with your service account netID may be useful to your
                team (e.g. sending official emails from your app, collecting
                feedback from users).
            </li>
            <li>
                For more help on completing the form, read OIT's
                <a
                    target="_blank"
                    href="https://princeton.service-now.com/service?id=kb_article&sys_id=043a1f1f1b60b01041bd6286624bcb34"
                    >article</a
                >.
            </li>
        </ul>
        <h2 id="available-data-sources">Available Data Sources</h2>
        <h4 id="oit-api-store">OIT API Store</h4>
        <p>
            Once a service account has been created, you can use the APIs on
            OIT's API Store:
            <a target="_blank" href="https://api-store.princeton.edu/store/"
                >https://api-store.princeton.edu/store/</a
            >. To access the site, you must be connected to the
            <a
                target="_blank"
                href="https://princeton.service-now.com/service?sys_id=6023&id=kb_article"
                >Princeton VPN</a
            >
            or the Princeton eduroam WiFi network.
        </p>
        <ol>
            <li>Login to OIT API store site</li>
            <li>
                Click the Applications tab
                <ol>
                    <li>Edit the name of the default application</li>
                </ol>
            </li>
            <li>
                Click on the APIs tab
                <ol>
                    <li>
                        Subscribe to an API by selecting an API, selecting your
                        app's name, then click Subscribe.
                    </li>
                </ol>
            </li>
        </ol>
        <h4 id="available-apis">Available APIs</h4>
        <p>
            By default, the ActiveDirectory and PrincetonInfo APIs are available
            to you. To access the MobileApp API, you must send an email to the
            current Director for Software Infrastructure Services and ask them
            to add your service account netID to the approved accounts for the
            MobileApp API.
        </p>
        <h4 id="consuming-the-apis">Consuming the APIs</h4>
        <p>
            Vinay Ramesh&#39;s
            <a
                target="_blank"
                href="https://github.com/vr2amesh/COS333-API-Code-Examples/tree/master"
                >GitHub repository</a
            >
            contains (very) useful examples of calling these APIs in Python and Java.
            Here&#39;s a few tips for using this code:
        </p>
        <ul>
            <li>
                Each folder in the root directory is named after an API. Click
                into your desired folder.
            </li>
            <li>
                Click either &quot;java&quot; or &quot;python&quot; depending on
                the language you want.
            </li>
            <li>
                For Java implementations, you must copy/paste the following
                files into your codebase: Configs.java and ReqLib.java. For
                Python, copy/paste these files: configs.py and req_lib.py. Feel
                free to make changes to these files, but be careful!
                <ul>
                    <li>
                        Configs.java or configs.py contains essential API
                        information coded as instance variables/attributes,
                        including endpoints and keys.
                    </li>
                    <li>
                        ReqLib.java or req_lib.py contains code to make an API
                        request. One particularly useful method takes an
                        endpoint and arguments, makes an API request, and
                        returns a JSON response. For example, in MobileApp Java:
                        <a target="_blank" href="https://git.io/JEsqo"
                            >https://git.io/JEsqo</a
                        >
                        and in MobileApp Python:
                        <a target="_blank" href="https://git.io/JEsqK"
                            >https://git.io/JEsqK</a
                        >
                    </li>
                </ul>
            </li>
            <li>
                The remaining .java or .py files contain an example of using
                each of the API endpoints along with descriptive comments.
            </li>
        </ul>
        <p>
            Note that the API store uses the OAuth3 security protocol to protect
            its endpoints. On each request to the API, you must pass an access
            token into the request header. Check out the ReqLib.java/req_lib.py
            files for an example. An access token lasts for one hour. To update
            the access token for your app, follow the code in
            Configs.java/configs.py (the useful method mentioned above in
            ReqLib.java and req_lib.py updates the access token automatically).
        </p>
        <p>
            Along with an up-to-date access token, you'll need the Consumer Key
            and the Consumer Secret. To get these keys, login to the OIT API
            Store &gt; Applications &gt; Production Keys. Click Generate Keys to
            generate your permanent Consumer Key and Consumer Secret. Store
            these keys securely in your app.
        </p>
        <h4 id="about-the-apis">About the APIs</h4>
        <p>
            <strong><em>Active Directory</em></strong>
        </p>
        <table class="three-col">
            <thead>
                <tr>
                    <th>Endpoint</th>
                    <th>Parameter(s)</th>
                    <th>Response</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>/groups</td>
                    <td>name: name of group</td>
                    <td>
                        Returns all users that belong to a group on campus, e.g.
                        name = "Undergraduate Class of 2023" returns list of
                        netids of students in class of 2023.
                    </td>
                </tr>
                <tr>
                    <td>/users/full</td>
                    <td>uid: netid</td>
                    <td>
                        Returns info about a user in the Princeton community,
                        including full name, email, PUID, undergraduate or
                        graduate or faculty, department, student or faculty, and
                        groups that user belongs to. For faculty, also fetches
                        title, phone number, and office location.
                    </td>
                </tr>
                <tr>
                    <td>/users</td>
                    <td>uid: netid</td>
                    <td>
                        Returns info about a user in the Princeton community,
                        but only a subset of what is returned by /users/full.
                    </td>
                </tr>
                <tr>
                    <td>/users/basic</td>
                    <td>uid: netid</td>
                    <td>
                        Returns info about a user in the Princeton community,
                        but only a subset of what is returned by /users.
                    </td>
                </tr>
            </tbody>
        </table>
        <br />
        <p>
            <strong><em>PrincetonInfo</em></strong>
        </p>
        <table class="three-col">
            <thead>
                <tr>
                    <th>Endpoint</th>
                    <th>Parameter(s)</th>
                    <th>Response</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>/department</td>
                    <td>N/A</td>
                    <td>
                        Returns full names of all departments within Princeton,
                        e.g. "Art Museum", "Computer Science", &quot;Pace Ctr
                        for Civic Engagement&quot;.
                    </td>
                </tr>
                <tr>
                    <td>/departments</td>
                    <td>N/A OR id: department id</td>
                    <td>
                        An expanded version of /department. Returns name, id,
                        short, and long description of given department, or all
                        departments if none specified.
                    </td>
                </tr>
            </tbody>
        </table>
        <br />
        <p>
            <strong><em>MobileApp</em></strong>
        </p>
        <table class="three-col">
            <thead>
                <tr>
                    <th>Endpoint</th>
                    <th>Parameter(s)</th>
                    <th>Response</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>/courses</td>
                    <td>
                        term: term id <br />
                        subject: course department <br />
                        OR <br />
                        term: term id <br />
                        search: query that matches a course title, description, department
                        code, or professor name.
                    </td>
                    <td>
                        Returns info on courses in the given term that either
                        match the given subject or search query. Info includes
                        course name, professor name, and list of course sections
                        and each section's name, time, enrollment.
                    </td>
                </tr>
                <tr>
                    <td>/courses/terms</td>
                    <td>N/A</td>
                    <td>
                        Returns info on the current term, including the term id,
                        different formats of the term name, and the start and
                        end date.
                    </td>
                </tr>
                <tr>
                    <td>/dining/locations</td>
                    <td>
                        categoryId: type of dining location, e.g. 2: dining
                        halls, 6: amenities such as printers in each hall
                    </td>
                    <td>
                        Returns dining locations and in latitude and longitude
                        of the given category.
                    </td>
                </tr>
                <tr>
                    <td>/dining/menu</td>
                    <td>
                        locationId: dining hall id <br />
                        menuId: breakfast, lunch, dinner
                    </td>
                    <td>
                        Returns a list of food items on the specified menu,
                        including the id, name, description, link, and icons
                        (e.g. vegan) of each item.
                    </td>
                </tr>
                <tr>
                    <td>/places/open</td>
                    <td>N/A</td>
                    <td>
                        Returns list of places and the name, id, and whether the
                        place is open for each place.
                    </td>
                </tr>
                <tr>
                    <td>/dining/events</td>
                    <td>placeId: id given to each place on campus</td>
                    <td>Returns given dining venue's open hours.</td>
                </tr>
                <tr>
                    <td>/events/events</td>
                    <td>from: from date, to: to date</td>
                    <td>Returns open hours for dining venues.</td>
                </tr>
            </tbody>
        </table>
        <h4 id="adding-a-new-api">Adding a new API</h4>
        <p>
            If none of the OIT APIs provides the data you need, then you may
            consider working with OIT to create a new API for a Princeton
            dataset. If interested, send an email to the current Director for
            Software Infrastructure Services and specify the dataset and its
            fields you are accessing, the input parameters for each endpoint,
            and permission from the data owner for OIT to gain access to their
            database. From there, you will work with OIT to create an API for
            the API store.
        </p>
        <p>
            To learn more about OIT, visit
            <a target="_blank" href="https://oit.princeton.edu/get-started"
                >https://oit.princeton.edu/get-started</a
            >.
        </p>
        <h4 id="tigerbook-api">TigerBook API</h4>
        <p>
            This API, developed based on the TigerBook app, gives you access to
            information about undergraduate students you cannot find in the OIT
            Active Directory API, such as major, name, residential college, and
            photo.
        </p>
        <table class="two-col">
            <thead>
                <tr>
                    <th>Endpoint</th>
                    <th>See Docs</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>/api/v1/getkey/&lcub;agent&rcub;</td>
                    <td>
                        <a
                            target="_blank"
                            href="https://github.com/alibresco/tigerbook-api/blob/master/README.md"
                            >https://github.com/alibresco/tigerbook-api/blob/master/README.md</a
                        >
                    </td>
                </tr>
                <tr>
                    <td>/api/v1/undergraduates</td>
                    <td>
                        <a
                            target="_blank"
                            href="https://github.com/alibresco/tigerbook-api/blob/master/README.md"
                            >https://github.com/alibresco/tigerbook-api/blob/master/README.md</a
                        >
                    </td>
                </tr>
                <tr>
                    <td>/api/v1/undergraduates/&lcub;netid&rcub;</td>
                    <td>
                        <a
                            target="_blank"
                            href="https://github.com/alibresco/tigerbook-api/blob/master/README.md"
                            >https://github.com/alibresco/tigerbook-api/blob/master/README.md</a
                        >
                    </td>
                </tr>
            </tbody>
        </table>
        <h4 id="princeton-art-museum-api">Princeton Art Museum API</h4>
        <p>
            This public API gives you access to information about objects in,
            packages in, and makers of the Princeton Art Museum's collection.
            The API is well-documented here:
            <a
                target="_blank"
                href="https://github.com/Princeton-University-Art-Museum/puam-api-docs"
                >https://github.com/Princeton-University-Art-Museum/puam-api-docs</a
            >.
        </p>
        <table class="two-col">
            <thead>
                <tr>
                    <th>Endpoint</th>
                    <th>See Docs</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>/objects/&lcub;objectId&rcub;</td>
                    <td>
                        <a
                            target="_blank"
                            href="https://github.com/Princeton-University-Art-Museum/puam-api-docs/blob/master/objects.md"
                            >https://github.com/Princeton-University-Art-Museum/puam-api-docs/blob/master/objects.md</a
                        >
                    </td>
                </tr>
                <tr>
                    <td>/makers/&lcub;constituentId&rcub;</td>
                    <td>
                        <a
                            target="_blank"
                            href="https://github.com/Princeton-University-Art-Museum/puam-api-docs/blob/master/makers.md"
                            >https://github.com/Princeton-University-Art-Museum/puam-api-docs/blob/master/makers.md</a
                        >
                    </td>
                </tr>
                <tr>
                    <td>/packages/&lcub;packageId&rcub;</td>
                    <td>
                        <a
                            target="_blank"
                            href="https://github.com/Princeton-University-Art-Museum/puam-api-docs/blob/master/packages.md"
                            >https://github.com/Princeton-University-Art-Museum/puam-api-docs/blob/master/packages.md</a
                        >
                    </td>
                </tr>
                <tr>
                    <td>/search</td>
                    <td>
                        <a
                            target="_blank"
                            href="https://github.com/Princeton-University-Art-Museum/puam-api-docs/blob/master/search.md"
                            >https://github.com/Princeton-University-Art-Museum/puam-api-docs/blob/master/search.md</a
                        >
                    </td>
                </tr>
            </tbody>
        </table>
        <h4 id="other-non-api-data-sources">Other non-API data sources</h4>
        <ul>
            <li>
                Web scraping, e.g. scraping Course Offerings site for course
                grading policies.
            </li>
            <li>
                Download floor plans from the housing website, with Princeton
                student login.
            </li>
        </ul>
        <h4>
            See source code for current TigerApps at
            <a target="_blank" href="https://www.tigerapps.org/#apply"
                >https://www.tigerapps.org/</a
            >
        </h4>
        <p>
            Huge thanks to
            <a
                target="_blank"
                href="https://github.com/vr2amesh"
                target="_blank">Vinay Ramesh '20</a
            >
            for compiling usage information on many Princeton data sources and allowing
            this doc to reference his code examples.
        </p>
    </main>
    <Footer />
</Layout>

<style lang="postcss">

    main {

        a {
            @apply text-secondary hover:text-secondary-hover underline;
        }
    
        table {
            border-collapse: collapse;
            width: 100%;
        }
    
        th,
        td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
    
        th {
            background-color: #f2f2f2;
        }
    
        ul {
            list-style-type: disc;
            padding-left: 1.5rem;
    
            ul {
                list-style-type: circle;
            }
        }
    
        ol {
            list-style-type: decimal;
            padding-left: 1.5rem;
    
            ol {
                list-style-type: lower-alpha;
            }
        }
    
        li {
            margin-bottom: 0.5rem;
        }
    }
</style>
